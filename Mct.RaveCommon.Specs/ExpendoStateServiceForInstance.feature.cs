// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.34014
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

#region Designer generated code

using TechTalk.SpecFlow;

#pragma warning disable

namespace Medidata.Cloud.Thermometer.RaveCommon.Specs
{
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("ExpendoStateServiceForInstance",
        Description = "In order to extend state for static classes\nAs a developer\nI want use ExpendoStat" +
                      "eService on static classes", SourceFile = "ExpendoStateServiceForInstance.feature",
        SourceLine = 0)]
    public partial class ExpendoStateServiceForInstanceFeature
    {
        private static TechTalk.SpecFlow.ITestRunner testRunner;

        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            var featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"),
                "ExpendoStateServiceForInstance",
                "In order to extend state for static classes\nAs a developer\nI want use ExpendoStat" +
                "eService on static classes", ProgrammingLanguage.CSharp, ((string[]) (null)));
            testRunner.OnFeatureStart(featureInfo);
        }

        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }

        public virtual void TestInitialize()
        {
        }

        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }

        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }

        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }

        public virtual void FeatureBackground()
        {
#line 6
#line 7
            testRunner.Given("I have an Object instance \"a\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "Given ");
#line 8
            testRunner.And("I have an Object instance \"b\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "And ");
#line 9
            testRunner.And("I have an ExpendoStateService", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "And ");
#line hidden
        }

        [TechTalk.SpecRun.ScenarioAttribute("Set state for different instances", SourceLine = 10)]
        public virtual void SetStateForDifferentInstances()
        {
            var scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Set state for different instances",
                ((string[]) (null)));
#line 11
            this.ScenarioSetup(scenarioInfo);
#line 6
            this.FeatureBackground();
#line 12
            testRunner.Given("I set state \"State\" as \"Running\" for instance \"a\"", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "Given ");
#line 13
            testRunner.And("I set state \"State\" as \"Stopping\" for instance \"b\"", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "And ");
#line 14
            testRunner.When("I get state \"State\" for instance \"a\"", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 15
            testRunner.Then("the result should be \"Running\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "Then ");
#line 16
            testRunner.When("I get state \"State\" for instance \"b\"", ((string) (null)),
                ((TechTalk.SpecFlow.Table) (null)), "When ");
#line 17
            testRunner.Then("the result should be \"Stopping\"", ((string) (null)), ((TechTalk.SpecFlow.Table) (null)),
                "Then ");
#line hidden
            this.ScenarioCleanup();
        }

        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}

#pragma warning restore

#endregion